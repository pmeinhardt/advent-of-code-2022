#!/usr/bin/env ruby

SHAPES = <<-SHAPES.split("\n\n")
####

.#.
###
.#.

..#
..#
###

#
#
#
#

##
##
SHAPES

class Rock
  SOLID = "#"

  include Enumerable

  attr_reader :height, :width, :rasterized

  def initialize(shape)
    lines = shape.lines.map(&:chomp)

    @rasterized = lines.reverse.map(&:chars)
    @width = rasterized.map(&:length).max
    @height = rasterized.length
  end

  def solid?(x, y)
    return false if x < 0 || y < 0
    @rasterized.at(y)&.at(x) == SOLID
  end

  def each
    @rasterized.each_with_index do |row, y|
      row.each_with_index do |char, x|
        yield x, y, char == SOLID
      end
    end
  end

  def to_s
    @rasterized.map(&:join).reverse.join("\n")
  end
end

class Simulation
  attr_reader :height, :width

  def initialize(rocks, jets, width:, offset:)
    @rocks = rocks.cycle
    @jets = jets.cycle

    @offset = offset
    @width = width

    @height = 0
    @map = []
  end

  def run
    rock = @rocks.next
    x, y = [@offset[0], @offset[1] + @height]

    while true
      jet = @jets.next

      if jet == ">" then
        x += 1 if valid?(rock, x + 1, y)
      elsif jet == "<" then
        x -= 1 if valid?(rock, x - 1, y)
      end

      if valid?(rock, x, y - 1) then
        y -= 1
      else
        break
      end
    end

    inc = [0, y + rock.height - @height].max

    inc.times { @map << "." * @width }
    @height += inc

    rock.each { |xx, yy, solid| @map[y + yy][x + xx] = Rock::SOLID if solid }
  end

  def valid?(rock, x, y)
    return false if x < 0 || x + rock.width > @width
    return false if y < 0

    return true if y >= @height

    return rock.none? do |xx, yy, solid|
      solid && @map.size > y + yy && @map[y + yy][x + xx] == Rock::SOLID
    end
  end

  def to_s
    @map.reverse.join("\n")
  end
end

if __FILE__ == $0
  jets = STDIN.read(nil).chomp.chars
  rocks = SHAPES.map { |shape| Rock.new(shape) }

  sim = Simulation.new(rocks, jets, width: 7, offset: [2, 3])
  2022.times { sim.run }

  puts sim.height
end
